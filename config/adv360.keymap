#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none       &kp N1       &kp N2  &kp N3          &kp N4           &kp N5  &tog 1                                                                &none                  &kp N6  &kp N7            &kp N8               &kp N9   &kp N0                       &none
&kp TILDE   &kp Q        &kp W   &kp E           &kp R            &kp T   &kp LG(C)                                                             &kp LG(Z)              &kp Y   &kp U             &kp I                &kp O    &kp P                        &kp DOUBLE_QUOTES
&kp TAB     &hm LCTRL A  &kp S   &kp D           &kp F            &kp G   &kp LG(V)             &none  &kp HOME           &kp PAGE_UP    &sl 5  &kp LS(LG(Z))          &kp H   &kp J             &kp K                &kp L    &hm RIGHT_CONTROL SEMICOLON  &kp SQT
&kp ESCAPE  &lt 3 Z      &kp X   &hm LEFT_ALT C  &hm LEFT_META V  &kp B                                &kp END            &kp PAGE_DOWN                                &kp N   &hm RIGHT_META M  &hm RIGHT_ALT COMMA  &kp DOT  &lt 3 SLASH                  &kp GRAVE
&none       &none        &none   &none           &sk LEFT_SHIFT           &hm LEFT_SHIFT SPACE  &sl 2  &kp BACKSPACE      &kp DELETE     &sl 2  &hm RIGHT_SHIFT ENTER          &sk LEFT_SHIFT    &kp SPACE            &none    &none                        &none
            >;
        };

        WIN {
            bindings = <
&none       &kp N1          &kp N2  &kp N3           &kp N4              &kp N5  &to 0                                                   &none                  &kp N6  &kp N7               &kp N8                &kp N9   &kp N0                   &none
&kp TILDE   &kp Q           &kp W   &kp E            &kp R               &kp T   &kp LC(C)                                               &kp LC(Z)              &kp Y   &kp U                &kp I                 &kp O    &kp P                    &kp DOUBLE_QUOTES
&kp TAB     &hm LEFT_ALT A  &kp S   &kp D            &kp F               &kp G   &kp LC(V)             &none  &trans      &trans  &sl 5  &kp LC(LS(Z))          &kp H   &kp J                &kp K                 &kp L    &hm RIGHT_ALT SEMICOLON  &kp SQT
&kp ESCAPE  &lt 4 Z         &kp X   &hm LEFT_META C  &hm LEFT_CONTROL V  &kp B                                &trans      &trans                                &kp N   &hm RIGHT_CONTROL M  &hm RIGHT_META COMMA  &kp DOT  &lt 4 SLASH              &kp GRAVE
&none       &none           &none   &none            &sk LEFT_SHIFT              &hm LEFT_SHIFT SPACE  &sl 2  &trans      &trans  &sl 2  &hm RIGHT_SHIFT ENTER          &sk LEFT_SHIFT       &kp SPACE             &none    &none                    &none
            >;
        };

        CHARS {
            bindings = <
&none       &kp N1           &kp N2        &kp N3        &kp N4        &kp N5        &none                                                                &none                  &kp N6                &kp N7                 &kp N8            &kp N9             &kp N0         &none
&kp TILDE   &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PIPE      &trans                                                               &trans                 &kp LESS_THAN         &kp GREATER_THAN       &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp SEMICOLON  &kp DOUBLE_QUOTES
&kp CARET   &kp N0           &kp MINUS     &kp PLUS      &kp EQUAL     &kp ASTERISK  &trans                &none          &none       &none   &none       &trans                 &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp COLON      &kp SQT
&kp ESCAPE  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                                             &trans      &trans                                     &kp NON_US_BACKSLASH  &kp UNDERSCORE         &kp COMMA         &kp DOT            &kp FSLH       &kp GRAVE
&none       &kp NUMBER_6     &kp N7        &kp N8        &kp N9                      &hm LEFT_SHIFT SPACE  &kp BACKSPACE  &trans      &trans  &kp DELETE  &hm RIGHT_SHIFT ENTER                        &sk LEFT_SHIFT         &kp SPACE         &kp PERCENT        &none          &kp QUESTION
            >;
        };

        movement {
            bindings = <
&none   &none   &none   &none   &none   &none   &none                                                                         &none            &none           &none                     &none                      &none            &none                  &none
&trans  &trans  &trans  &trans  &trans  &trans  &none                                                                         &none            &kp HOME        &kp PAGE_DOWN             &kp PAGE_UP                &kp END          &kp LC(RIGHT_BRACKET)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none            &trans     &kp K_MUTE      &trans             &trans         &none            &kp LEFT_ARROW  &kp DOWN_ARROW            &kp UP_ARROW               &kp RIGHT_ARROW  &kp LG(LEFT_BRACKET)   &kp LG(RIGHT_BRACKET)
&trans  &trans  &trans  &trans  &trans  &trans                              &trans          &kp C_VOLUME_UP                                    &trans          &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))  &trans           &trans                 &trans
&trans  &trans  &trans  &trans  &trans          &kp RIGHT_SHIFT  &kp LCTRL  &trans          &kp C_VOLUME_DOWN  &kp RIGHT_ALT  &kp RIGHT_SHIFT                  &trans                    &trans                     &trans           &trans                 &trans
            >;
        };

        WIN_MOV {
            bindings = <
&none   &none   &none   &none   &none   &none   &none                                                                         &none            &none           &none            &none         &none            &none                  &none
&trans  &trans  &trans  &trans  &trans  &trans  &none                                                                         &none            &kp HOME        &kp PAGE_DOWN    &kp PAGE_UP   &kp END          &kp LC(RIGHT_BRACKET)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none            &trans     &kp K_MUTE      &trans             &trans         &none            &kp LEFT_ARROW  &kp DOWN_ARROW   &kp UP_ARROW  &kp RIGHT_ARROW  &kp LC(MINUS)          &kp LC(LS(MINUS))
&trans  &trans  &trans  &trans  &trans  &trans                              &trans          &kp C_VOLUME_UP                                    &trans          &kp LC(LS(TAB))  &kp LC(TAB)   &trans           &trans                 &trans
&trans  &trans  &trans  &trans  &trans          &kp RIGHT_SHIFT  &kp LCTRL  &trans          &kp C_VOLUME_DOWN  &kp RIGHT_ALT  &kp RIGHT_SHIFT                  &kp LA(LS(TAB))  &kp LA(TAB)   &trans           &trans                 &trans
            >;
        };

        FUNC {
            bindings = <
&trans  &trans   &trans   &trans   &trans   &trans   &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F16  &kp F17  &kp F18  &kp F19           &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
